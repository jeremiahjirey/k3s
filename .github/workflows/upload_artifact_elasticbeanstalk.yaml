name: Update Env
on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1                 
  ECR_REPOSITORY: cc-repository
  ECS_CLUSTER: awseb-Myapppdemo-env-hmagwqvdcc
  WORKER_TASK_DEFINITION: worker/task-definition.json
  WORKER_CONTAINER_NAME: nginx-proxy


jobs:
  deploy: 
    name: Upload Artifact
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
    
    - name: Install dependencies
      run: |
        npm install
        npm install -g pm2
        npm ci

    - name: Build zip
      run: zip -r showipjs.zip . -x "node_modules/*"

    - name: Verify ZIP Contents
      run: unzip -l showipjs.zip  # Pastikan file utama ada

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: showipjs
        path: showipjs.zip
    
    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
        aws configure set region ${{ secrets.AWS_REGION }}

    - name: Upload to S3
      run: |
        aws s3 cp showipjs.zip s3://${{ secrets.S3_BUCKET_NAME }}/showipjs.zip
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
  build:
    needs: deploy
    name: Build Image Production
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        WORKER_IMAGE_TAG: worker-nodejs-latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG --build-arg aws_region=${{ env.AWS_REGION }} --build-arg copy_or_mount="copy" -f worker/Dockerfile ./worker
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG


  setup:
    needs: deploy
    name: Update Task Definition
    runs-on: ubuntu-latest
    environment: Production
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set Variable
      id: set-vars
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        WORKER_IMAGE_TAG: worker-nodejs-latest
      run: |
        echo "::set-output name=worker_image::$ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition (Worker)
      id: task-def-worker
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.WORKER_TASK_DEFINITION }}
        container-name: ${{ env.WORKER_CONTAINER_NAME }}
        image: ${{ steps.set-vars.outputs.worker_image }}

    - name: Deploy Amazon ECS task definition Worker
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-worker.outputs.task-definition }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
