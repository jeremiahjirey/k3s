Resources:
 VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC 
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1


  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC 
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC 
      AvailabilityZone: us-east-1c
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 3

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.5.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PrivateSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1c
      CidrBlock: 10.0.6.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet3

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatGateway1EIP:
    Type: "AWS::EC2::EIP"
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1: 
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NAT1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route

  DefaultPublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

          
  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route 1

  PrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet3

  AllTrafictSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: SG-ALL-Trafict
      GroupDescription: All Trafict Seucrity
      VpcId: !Ref VPC 
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: AllTrfacit-SecurityGroup

  


  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:  
      Scheme: internet-facing
      Subnets:
        - subnet-0650b493fb5a759a0
        - subnet-02884d50b10df6e27
        - subnet-02e7faddd98a96309
      SecurityGroups:
        - !Ref AllTrafictSG
      Tags:
        - Key: Name
          Value: AmazonLoadBalancer
#ECR
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
       RepositoryName: cc-repository
       ImageTagMutability: MUTABLE
       EncryptionConfiguration: 
         EncryptionType: AES256
       Tags:
         - Key: Name
           Value: cc-repository

#ECS
     ShoIpTaskDefinition: 
        Type: "AWS::ECS::TaskDefinition"
        Properties:
          Family: amazon
          Cpu: 1024 #cpu task
          Memory: 2048 #memory task
          NetworkMode: host
          RequiresCompatibilities:
            - EC2
          TaskRoleArn: arn:aws:iam::996958409310:role/LabRole
          ExecutionRoleArn: arn:aws:iam::996958409310:role/LabRole
          ContainerDefinitions:
            - Name: showipjs-container
              Image: 996958409310.dkr.ecr.us-east-1.amazonaws.com/cc-repository:showip-nodejs-latest
              Cpu: 1024 #cpu container
              Memory: 2048 #memory container
              PortMappings:
                - ContainerPort: 5000
                  HostPort: 5000 
                  appprotocol: http
              LogConfiguration: #liat di manualnya
                LogDriver: awslogs
                Options:
                  mode: non-blocking
                  max-buffer-size: 25m
                  awslogs-group: /ecs/amazon
                  awslogs-create-group: "true"
                  awslogs-region: us-east-1
                  awslogs-stream-prefix: ecs

  EcsCluster:
      Type: AWS::ECS::Cluster
      Properties: 
        ClusterName: amazon-cluster
        ClusterSettings:
          - Name: containerInsights
            Value: enabled
        ServiceConnectDefaults: 
          NameSpace: amazon-cluster

  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    DependsOn: EcsCluster
    Properties:
      LaunchTemplateData:
        ImageId: ami-085ad6ae776d8f09c
        SecurityGroupIds: 
          - !Ref AllTrafictSG
        InstanceType: t2.large
        KeyName: vockey
        IamInstanceProfile:
           Arn: arn:aws:iam::257145219782:instance-profile/LabInstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            cat <<EOL > ecs.sh
            #!/bin/bash -xe
            cd /home/ec2-user
            sudo yum update -y
            sudo yum install ecs-init -y
            sudo sysctl -w net.ipv4.conf.all.route_localnet=1
            sudo iptables -t nat -A PREROUTING -p tcp -d 169.254.170.2 --dport 80 -j DNAT --to-destination 127.0.0.1:51679
            sudo iptables -t nat -A OUTPUT -d 169.254.170.2 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 51679
            sudo systemctl enable ecs
            sudo systemctl start ecs
            sudo systemctl stop ecs
            sudo chmod -R 777 /etc/ecs
            sudo echo "ECS_CLUSTER=amazon-cluster" | sudo tee -a /etc/ecs/ecs.config
            sudo echo "ECS_ENABLE_CONTAINER_METADATA=true" | sudo tee -a /etc/ecs/ecs.config
            sudo systemctl start ecs
            EOL
            sudo chmod +x ecs.sh
            sudo bash ecs.sh

  
  ECSAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AvailabilityZones:
          - us-east-1a
          - us-east-1b
          - us-east-1c
        VPCZoneIdentifier:
          - subnet-0d546c403773c18af
          - subnet-083afee1a7296f7a9
          - subnet-078c34bb0457536d1
        MinSize: 2
        MaxSize: 2
        DesiredCapacity: 2
        NewInstancesProtectedFromScaleIn: true
        LaunchTemplate:
          LaunchTemplateId: !Ref LaunchTemplate
          Version: !GetAtt LaunchTemplate.LatestVersionNumber
        Tags:
          - Key: Name
            PropagateAtLaunch: true
            Value: Cluster-instance

  AsgCapacityProvider:
      Type: AWS::ECS::CapacityProvider
      Properties:
        AutoScalingGroupProvider:
          AutoScalingGroupArn: !Ref ECSAutoScalingGroup
          ManagedScaling:
            Status: ENABLED
            TargetCapacity: 100
          ManagedTerminationProtection: DISABLED

  CapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref EcsCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
        - !Ref AsgCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref AsgCapacityProvider
          Weight: 1

 EcsCluster:
      Type: AWS::ECS::Cluster
      Properties: 
        ClusterName: amazon-cluster
        ClusterSettings:
          - Name: containerInsights
            Value: enabled
        ServiceConnectDefaults: 
          NameSpace: amazon-cluster

  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    DependsOn: EcsCluster
    Properties:
      LaunchTemplateData:
        ImageId: ami-04681163a08179f28
        SecurityGroupIds: 
          - !Ref AllTrafictSG
        InstanceType: t2.nano
        KeyName: vockey
        IamInstanceProfile:
          Arn: arn:aws:iam::257145219782:instance-profile/LabInstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum update -y
            sudo systemctl install ecs-init -y
            sudo systemctl stop ecs
            sudo chmod -R 777 /etc/ecs
            echo "ECS_CLUSTER=amazon-cluster" >> /etc/ecs/ecs.config
            echo "ECS_ENABLE_CONTAINER_METADATA=true" >> /etc/ecs/ecs.config 
            sudo systemctl start ecs
            systemctl status ecs


  
  ECSAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AvailabilityZones:
          - us-east-1a
          - us-east-1b
          - us-east-1c
        VPCZoneIdentifier:
          - subnet-0d546c403773c18af
          - subnet-083afee1a7296f7a9
          - subnet-078c34bb0457536d1
        MinSize: 2
        MaxSize: 2
        DesiredCapacity: 2
        NewInstancesProtectedFromScaleIn: true
        LaunchTemplate:
          LaunchTemplateId: !Ref LaunchTemplate
          Version: !GetAtt LaunchTemplate.LatestVersionNumber
        Tags:
          - Key: Name
            PropagateAtLaunch: true
            Value: Cluster-instance

  AsgCapacityProvider:
      Type: AWS::ECS::CapacityProvider
      Properties:
        AutoScalingGroupProvider:
          AutoScalingGroupArn: !Ref ECSAutoScalingGroup
          ManagedScaling:
            Status: ENABLED
            TargetCapacity: 100
          ManagedTerminationProtection: ENABLED

  CapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref EcsCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
        - !Ref AsgCapacityProvider
      DefaultCapacityProviderStrategy:
        - Base: 0
          Weight: 1
          CapacityProvider: !Ref CapacityProvider

      AvailabilityZoneRebalancing: ENABLED
      CapacityProviderStrategy: 
        - CapacityProvider: !Ref EcsCapacityProvider
          Weight: 1
      ServiceName: amazon-cc-25
       Cluster: !Ref ECSCluster
      PlacementStrategies:
        - Type: spread
          Field: attribute:ecs.availability-zone
      DeploymentConfiguration:
        MinimumHealthyPercent: 75
        MaximumPercent: 200
      DesiredCount: 2
      TaskDefinition: arn:aws:ecs:us-east-1:996958409310:task-definition/amazon-cc-25:12
      LoadBalancers:  
        - ContainerName: showipjs-container
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
      Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
      Properties:
        HealthCheckIntervalSeconds: 6
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        TargetType: instance
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 10
        VpcId: !Ref VPC
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 0

  PublicLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
                Weight: 100
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
#SNS 

SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sns:Publish"
            Resource: !Ref SNS
      Topics:
        - !Ref SNS

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref SNS
      Endpoint: imannueljeremi@gmail.com
EC2EventBrigde:
    Type: AWS::Events::Rule
    Properties:
      Name: ECS2_STATE_NOTIFICATION
      Description: Memonitor perubahan status instance EC2.
      EventPattern: >-
        {"source":["aws.ec2"],"detail-type":["EC2 Instance State-change Notification"],"detail":{"state":["pending","running","shutting-down","terminated","stopping","stopped"]}}
      State: ENABLED
      EventBusName: default
      Targets:
        - Id: Id85cc19a7-c015-4213-b8c5-2afff0846948
          Arn: !Ref SNS
 
 #ECS FARGATE
 #ECSFargate

TaskDefinition: 
      Type: "AWS::ECS::TaskDefinition"
      Properties:
        Family: showipApp
        Cpu: 1024 #cpu task
        Memory: 2048 #memory task
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        TaskRoleArn: arn:aws:iam::257145219782:role/LabRole
        ExecutionRoleArn: arn:aws:iam::257145219782:role/LabRole
        ContainerDefinitions:
          - Name: showipApp-container
            Image: 257145219782.dkr.ecr.us-east-1.amazonaws.com/cc-repository:worker-nodejs-latest
            Cpu: 1024 #cpu container
            Memory: 2048 #memory container
            PortMappings:
              - ContainerPort: 8000
                HostPort: 8000 
                appprotocol: http
            LogConfiguration: #liat di manualnya
              LogDriver: awslogs
              Options:
                mode: non-blocking
                max-buffer-size: 25m
                awslogs-group: /ecs/showipApp
                awslogs-create-group: "true"
                awslogs-region: us-east-1
                awslogs-stream-prefix: ecs
  ECSCLuster: 
      Type: "AWS::ECS::Cluster"
      Properties:
        ClusterName: test-cluster-yaml
        CapacityProviders: 
          - FARGATE
        ClusterSettings:
            - Name: containerInsights
              Value: enabled

  CrudTargetGroup:
      Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
      Properties:
        HealthCheckIntervalSeconds: 6
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        TargetType: ip
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 10
        VpcId: !Ref VPC
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 0

  CrudFargateCrudService:
      Type: AWS::ECS::Service
      Properties:
        ServiceName: crud-fargate-service
        Cluster: !Ref ECSCLuster
        DesiredCount: 2
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            SecurityGroups:
              - !Ref AllTrafictSG
            Subnets:
              - subnet-011059a42ded7c798
              - subnet-06a5a43af6e05ceff
              - subnet-0401538c57210ee0c
        TaskDefinition: arn:aws:ecs:us-east-1:996958409310:task-definition/nodebasic:2
        LoadBalancers:  
          - ContainerName: crud-container
            ContainerPort: 8000
            TargetGroupArn: !Ref CrudTargetGroup

  CrudPublicLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref CrudTargetGroup
                Weight: 100
      LoadBalancerArn: !Ref CrudLoadBalancer
      Port: 80
      Protocol: HTTP




 