Resources:
 VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC 
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1


  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC 
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC 
      AvailabilityZone: us-east-1c
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 3

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.5.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PrivateSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1c
      CidrBlock: 10.0.6.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet3

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatGateway1EIP:
    Type: "AWS::EC2::EIP"
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1: 
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NAT1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route

  DefaultPublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

          
  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route 1

  PrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet3

  AllTrafictSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: SG-ALL-Trafict
      GroupDescription: All Trafict Seucrity
      VpcId: !Ref VPC 
      SecurityGroupIngres:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: AllTrfacit-SecurityGroup

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: worker-launchtemplate-1.0
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: ami-09115b7bffbe3c5e4
        InstanceType: t2.large
        IamInstanceProfile:
          Arn: arn:aws:iam::996958409310:instance-profile/LabInstanceProfile
        SecurityGroupIds: 
          - !Ref AllTrafictSG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum update -y
            sudo yum insttall docker -y
            sudo systemctl enable docker
            sudo systemctl start docker
            echo ECS_CLUSTER=worker-cluster  >> /etc/ecs/ecs.config

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:  
      Scheme: internet-facing
      Subnets:
        - !Ref subnet-0423bb203e215139d
        - !Ref subnet-01ec2cde1075aa2d2
        - !Ref subnet-0512e0f2b07fe8e4d
      SecurityGroups:
        - !Ref AllTrafictSG
      Tags:
        - Key: Name
          Value: ECS-LoadBalancer
#ECR
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
       RepositoryName: cc-repository
       ImageTagMutability: MUTABLE
       EncryptionConfiguration: 
         EncryptionType: AES256
       Tags:
         - Key: Name
           Value: cc-repository

#ECS
    TaskDefinition: 
      Type: "AWS::ECS::TaskDefinition"
      Properties:
        Family: amazon-cc
        Cpu: 1024 #cpu task
        Memory: 2048 #memory task
        NetworkMode: host
        RequiresCompatibilities:
          - EC2
        TaskRoleArn: arn:aws:iam::996958409310:role/LabRole
        ExecutionRoleArn: arn:aws:iam::996958409310:role/LabRole
        ContainerDefinitions:
          - Name: showip-container
            Memory: 2048
            Image: 996958409310.dkr.ecr.us-east-1.amazonaws.com/cc-repository:showip-nodejs-latest
            Cpu: 1024 #cpu container
            Memory: 2048 #memory container
            PortMappings:
              - ContainerPort: 5000
                HostPort: 5000 
                appprotocol: http
            LogConfiguration: #liat di manualnya
              LogDriver: awslogs
              Options:
                mode: non-blocking
                max-buffer-size: 25m
                awslogs-group: /ecs/
                awslogs-region: us-east-1
                awslogs-stream-prefix: ecs


    EcsCluster:
      Type: "AWS::ECS::Cluster"
      Properties: 
        CapacityProviders: 
          - EC2
        ClusterName: worker-cluster
        Configuration:
        ExecuteCommandConfiguration:
        Logging: DEFAULT
    
    ECSAutoScalingGroup:
      Type: "AWS::AutoScaling::AutoScalingGroup"
      Properties:
        AvailabilityZones:
          - us-east-1a
          - us-east-1b
          - us-east-1c
        VPCZoneIdentifier:
          - subnet-0accf6f6b933d14e4
          - subnet-032f787c03e2fc7ae
          - subnet-08c1c7e710dac8452
        DesiredCapacity: 3
        NewInstancesProtectedFromScaleIn: true
        LaunchTemplate:
          LaunchTemplateId: !Ref lt-0c5b59f91d24fc881
          Version: !GetAtt LaunchTemplate.LatestVersionNumber
        EC2InstanceRoleArn: arn:aws:iam::996958409310:instance-profile/LabInstanceProfile
        MaxSize: 3
        MinSize: 2
        SecurityGroupIds:
          - !Ref AllTrafictSG
        Tags:
          - Key: Name
            PropagateAtLaunch: true
            Value: showipserver-apps

   EcsCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: worker-cluster

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      VPCZoneIdentifier:
        - subnet-0accf6f6b933d14e4
        - subnet-032f787c03e2fc7ae
        - subnet-08c1c7e710dac8452
      MinSize: 2
      MaxSize: 3
      DesiredCapacity: 3
      NewInstancesProtectedFromScaleIn: true
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: showipserver-apps

  EcsCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: EC2CapacityProvider
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          InstanceWarmupPeriod: 60
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 100
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED

  CapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref EcsCluster
      CapacityProviders:
        - !Ref EcsCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref EcsCapacityProvider
          Weight: 1